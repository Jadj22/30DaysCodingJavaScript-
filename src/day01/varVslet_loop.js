// üìÅ R√©sum√© des diff√©rences entre var et let dans une boucle avec setTimeout

// --- Exemple avec var ---
console.log("--- Exemple avec var ---");
for (var i = 0; i <= 3; i++) {
  setTimeout(() => console.log(i), 1000);
}
// R√©sultat attendu (apr√®s 1 seconde):
// 4
// 4
// 4
// 4

// Pourquoi ?
// - var a une port√©e fonctionnelle : i est partag√©e dans toute la boucle
// - Les fonctions setTimeout sont appel√©es apr√®s la fin de la boucle
// - √Ä la fin, i vaut 4, donc elles affichent toutes 4


// --- Exemple avec let ---
console.log("--- Exemple avec let ---");
for (let i = 0; i <= 3; i++) {
  setTimeout(() => console.log(i), 1000);
}
// R√©sultat attendu (apr√®s 1 seconde):
// 0
// 1
// 2
// 3

// Pourquoi ?
// - let a une port√©e de bloc : chaque it√©ration a sa propre copie de i
// - Les fonctions setTimeout capturent la valeur de i au moment de l'it√©ration

// üß† Retenir :
// - var => m√™me variable partag√©e
// - let => nouvelle variable √† chaque tour de boucle

// üîÅ Et la boucle ?
// - Elle continue tant que la condition est vraie
// - Quand la condition est fausse, la boucle s'arr√™te mais la variable i garde sa valeur finale
// - Exemple : i <= 3 ‚Üí la boucle s'arr√™te quand i vaut 4
